import { ENTRY_IMAGE_SIZE, IMAGE_GENERATED_TYPE } from './constants';

export async function createImageWithSticker(
  mainImageUrl: string,
  stickerImageUrl: string
) {
  const canvas = document.createElement('CANVAS') as HTMLCanvasElement;

  canvas.style.width = `${ENTRY_IMAGE_SIZE}px`;
  canvas.style.height = `${ENTRY_IMAGE_SIZE}px`;

  const scale = window.devicePixelRatio;

  canvas.width = Math.floor(ENTRY_IMAGE_SIZE * scale);
  canvas.height = Math.floor(ENTRY_IMAGE_SIZE * scale);

  const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;

  ctx.scale(scale, scale);

  await drawImageInCanvas(ctx, mainImageUrl);
  await drawImageInCanvas(ctx, stickerImageUrl);

  return canvas.toDataURL(IMAGE_GENERATED_TYPE, 1.0);
}

async function drawImageInCanvas(
  ctx: CanvasRenderingContext2D,
  imageUrl: string
) {
  return new Promise((resolve, reject) => {
    const image = new Image();

    image.src = imageUrl;
    image.crossOrigin = 'anonymous'; // for images generated by Faker

    image.onload = () => {
      ctx.drawImage(image, 0, 0, ENTRY_IMAGE_SIZE, ENTRY_IMAGE_SIZE);
      resolve(null);
    };
    image.onerror = reject;
  });
}
